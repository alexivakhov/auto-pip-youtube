// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó SVG —ñ–∫–æ–Ω–æ–∫ –≤ PNG
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Canvas API –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É SVG –≤ PNG

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó SVG –≤ PNG —á–µ—Ä–µ–∑ Canvas
async function convertSvgToPng(svgPath, pngPath, size) {
    try {
        // –ß–∏—Ç–∞—î–º–æ SVG —Ñ–∞–π–ª
        const svgContent = fs.readFileSync(svgPath, 'utf8');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ Canvas –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        const { createCanvas, loadImage } = require('canvas');
        const canvas = createCanvas(size, size);
        const ctx = canvas.getContext('2d');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ Data URL –∑ SVG
        const svgDataUrl = 'data:image/svg+xml;base64,' + Buffer.from(svgContent).toString('base64');
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ SVG —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const img = await loadImage(svgDataUrl);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º–æ –Ω–∞ Canvas
        ctx.drawImage(img, 0, 0, size, size);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ PNG
        const buffer = canvas.toBuffer('image/png');
        fs.writeFileSync(pngPath, buffer);
        
        console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: ${path.basename(svgPath)} ‚Üí ${path.basename(pngPath)}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ${svgPath}:`, error.message);
        return false;
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –±–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
function createSimplePngIcons() {
    const sizes = [16, 32, 48, 128];
    const iconsDir = path.join(__dirname, 'icons');
    
    console.log('üé® –°—Ç–≤–æ—Ä—é—é –ø—Ä–æ—Å—Ç—ñ PNG —ñ–∫–æ–Ω–∫–∏...');
    
    sizes.forEach(size => {
        const pngPath = path.join(iconsDir, `icon${size}.png`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π PNG –∑ Canvas (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
        try {
            const { createCanvas } = require('canvas');
            const canvas = createCanvas(size, size);
            const ctx = canvas.getContext('2d');
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω
            const gradient = ctx.createLinearGradient(0, 0, size, size);
            gradient.addColorStop(0, '#ff6b6b');
            gradient.addColorStop(0.5, '#ee5a24');
            gradient.addColorStop(1, '#ff4757');
            
            // –ú–∞–ª—é—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –∫—Ä—É–≥
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(size/2, size/2, size*0.45, 0, 2*Math.PI);
            ctx.fill();
            
            // –ú–∞–ª—é—î–º–æ TV —ñ–∫–æ–Ω–∫—É
            const tvSize = size * 0.5;
            const tvX = (size - tvSize) / 2;
            const tvY = (size - tvSize) / 2;
            
            // TV –∫–æ—Ä–ø—É—Å
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.fillRect(tvX + tvSize*0.1, tvY + tvSize*0.25, tvSize*0.8, tvSize*0.6);
            
            // TV –µ–∫—Ä–∞–Ω
            ctx.fillStyle = '#2c3e50';
            ctx.fillRect(tvX + tvSize*0.2, tvY + tvSize*0.35, tvSize*0.6, tvSize*0.4);
            
            // PiP –≤—ñ–∫–Ω–æ
            ctx.fillStyle = '#4CAF50';
            ctx.fillRect(tvX + tvSize*0.3, tvY + tvSize*0.4, tvSize*0.25, tvSize*0.2);
            
            // –¢–µ–∫—Å—Ç PiP
            ctx.fillStyle = 'white';
            ctx.font = `bold ${size*0.12}px Arial`;
            ctx.textAlign = 'center';
            ctx.fillText('PiP', size/2, size*0.85);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ PNG
            const buffer = canvas.toBuffer('image/png');
            fs.writeFileSync(pngPath, buffer);
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: icon${size}.png`);
        } catch (error) {
            console.log(`‚ö†Ô∏è Canvas –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—é –ø—Ä–æ—Å—Ç–∏–π PNG –¥–ª—è ${size}x${size}...`);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π PNG –±–µ–∑ Canvas
            createMinimalPng(size, pngPath);
        }
    });
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ PNG –±–µ–∑ Canvas
function createMinimalPng(size, pngPath) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π PNG –∑ –±–∞–∑–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    const width = size;
    const height = size;
    
    // PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –¥–∞–Ω—ñ
    const pngData = createBasicPngData(width, height);
    
    fs.writeFileSync(pngPath, Buffer.from(pngData));
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Å—Ç–∏–π PNG: ${path.basename(pngPath)}`);
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö PNG –¥–∞–Ω–∏—Ö
function createBasicPngData(width, height) {
    // –¶–µ –¥—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è PNG –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —è–∫ sharp –∞–±–æ canvas
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π PNG
    const data = [];
    
    // PNG —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
    data.push(0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A);
    
    // IHDR chunk
    const ihdrData = [
        0x00, 0x00, 0x00, 0x0D, // length
        0x49, 0x48, 0x44, 0x52, // "IHDR"
        (width >> 24) & 0xFF, (width >> 16) & 0xFF, (width >> 8) & 0xFF, width & 0xFF,
        (height >> 24) & 0xFF, (height >> 16) & 0xFF, (height >> 8) & 0xFF, height & 0xFF,
        0x08, // bit depth
        0x02, // color type (RGB)
        0x00, // compression
        0x00, // filter
        0x00  // interlace
    ];
    
    // –î–æ–¥–∞—î–º–æ IHDR
    data.push(...ihdrData);
    
    // –ü—Ä–æ—Å—Ç–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π IDAT chunk (—Å–ø—Ä–æ—â–µ–Ω–æ)
    const idatData = createGradientData(width, height);
    data.push(...idatData);
    
    // IEND chunk
    data.push(0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82);
    
    return data;
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
function createGradientData(width, height) {
    const data = [];
    
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            // –ì—Ä–∞–¥—ñ—î–Ω—Ç –≤—ñ–¥ —á–µ—Ä–≤–æ–Ω–æ–≥–æ –¥–æ –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ
            const r = Math.floor(255 * (1 - x/width));
            const g = Math.floor(107 * (1 - y/height));
            const b = Math.floor(107 * (1 - x/width));
            
            data.push(r, g, b);
        }
    }
    
    return data;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    const iconsDir = path.join(__dirname, 'icons');
    
    if (!fs.existsSync(iconsDir)) {
        fs.mkdirSync(iconsDir);
    }
    
    console.log('üé® –ö–æ–Ω–≤–µ—Ä—Ç—É—é SVG —ñ–∫–æ–Ω–∫–∏ –≤ PNG...');
    
    const sizes = [16, 32, 48, 128];
    let successCount = 0;
    
    for (const size of sizes) {
        const svgPath = path.join(iconsDir, `icon${size}.svg`);
        const pngPath = path.join(iconsDir, `icon${size}.png`);
        
        if (fs.existsSync(svgPath)) {
            const success = await convertSvgToPng(svgPath, pngPath, size);
            if (success) successCount++;
        } else {
            console.log(`‚ö†Ô∏è SVG —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${svgPath}`);
        }
    }
    
    if (successCount === 0) {
        console.log('üîÑ –°–ø—Ä–æ–±—É—é —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç—ñ PNG —ñ–∫–æ–Ω–∫–∏...');
        createSimplePngIcons();
    }
    
    console.log('\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìÅ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É icons/ –¥–ª—è PNG —Ñ–∞–π–ª—ñ–≤');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é
main().catch(console.error);
